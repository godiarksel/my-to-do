(()=>{"use strict";var n={424:(n,e,r)=>{r.d(e,{Z:()=>s});var t=r(537),o=r.n(t),i=r(645),a=r.n(i)()(o());a.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap);"]),a.push([n.id,"* {\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  font-family: Poppins, sans-serif;\r\n}\r\n\r\nbody {\r\n  background-color: whitesmoke;\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 22px;\r\n}\r\n\r\n.appContainer {\r\n  box-shadow: 5px 5px 15px -2px rgb(35, 34, 34, 0.8);\r\n  background-color: white;\r\n  padding-top: 22px;\r\n  width: 40%;\r\n  border-radius: 7px;\r\n}\r\n\r\n.appHeader {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 11px 20px;\r\n}\r\n\r\n.taskInput {\r\n  height: 48px;\r\n  padding: 0 24px;\r\n}\r\n\r\n.taskInput input {\r\n  width: 100%;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 14px;\r\n}\r\n\r\n.taskInput input::placeholder {\r\n  font-style: italic;\r\n}\r\n\r\n.task-list {\r\n  margin: 15px 20px;\r\n}\r\n\r\n.inactive {\r\n  display: none;\r\n}\r\n\r\n.line-through {\r\n  text-decoration: line-through;\r\n}\r\n\r\n.task-ui {\r\n  display: flex;\r\n  padding-left: 12px;\r\n  align-items: center;\r\n}\r\n\r\n.icon {\r\n  margin-left: auto;\r\n  margin-right: 12px;\r\n  cursor: pointer;\r\n  padding: 6px;\r\n}\r\n\r\n.highlight {\r\n  background-color: rgb(220, 220, 220);\r\n}\r\n\r\n.para {\r\n  margin-left: 12px;\r\n  padding: 12px;\r\n}\r\n\r\n.para:focus {\r\n  outline: none;\r\n}\r\n\r\n.clear-btn {\r\n  width: 100%;\r\n  border: none;\r\n  background-color: white;\r\n  padding: 15px 0;\r\n  border-top: 1px solid rgb(0, 0, 0, 0.4);\r\n  color: rgb(35, 34, 34);\r\n}\r\n\r\n.clear-btn:hover {\r\n  background-color: rgb(223, 220, 220);\r\n  cursor: pointer;\r\n}\r\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAEA;EACE,UAAU;EACV,SAAS;EACT,sBAAsB;EACtB,gCAAgC;AAClC;;AAEA;EACE,4BAA4B;EAC5B,aAAa;EACb,uBAAuB;EACvB,iBAAiB;AACnB;;AAEA;EACE,kDAAkD;EAClD,uBAAuB;EACvB,iBAAiB;EACjB,UAAU;EACV,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,aAAa;EACb,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,eAAe;EACf,YAAY;AACd;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,iBAAiB;EACjB,aAAa;AACf;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,uBAAuB;EACvB,eAAe;EACf,uCAAuC;EACvC,sBAAsB;AACxB;;AAEA;EACE,oCAAoC;EACpC,eAAe;AACjB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');\r\n\r\n* {\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  font-family: Poppins, sans-serif;\r\n}\r\n\r\nbody {\r\n  background-color: whitesmoke;\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 22px;\r\n}\r\n\r\n.appContainer {\r\n  box-shadow: 5px 5px 15px -2px rgb(35, 34, 34, 0.8);\r\n  background-color: white;\r\n  padding-top: 22px;\r\n  width: 40%;\r\n  border-radius: 7px;\r\n}\r\n\r\n.appHeader {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 11px 20px;\r\n}\r\n\r\n.taskInput {\r\n  height: 48px;\r\n  padding: 0 24px;\r\n}\r\n\r\n.taskInput input {\r\n  width: 100%;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 14px;\r\n}\r\n\r\n.taskInput input::placeholder {\r\n  font-style: italic;\r\n}\r\n\r\n.task-list {\r\n  margin: 15px 20px;\r\n}\r\n\r\n.inactive {\r\n  display: none;\r\n}\r\n\r\n.line-through {\r\n  text-decoration: line-through;\r\n}\r\n\r\n.task-ui {\r\n  display: flex;\r\n  padding-left: 12px;\r\n  align-items: center;\r\n}\r\n\r\n.icon {\r\n  margin-left: auto;\r\n  margin-right: 12px;\r\n  cursor: pointer;\r\n  padding: 6px;\r\n}\r\n\r\n.highlight {\r\n  background-color: rgb(220, 220, 220);\r\n}\r\n\r\n.para {\r\n  margin-left: 12px;\r\n  padding: 12px;\r\n}\r\n\r\n.para:focus {\r\n  outline: none;\r\n}\r\n\r\n.clear-btn {\r\n  width: 100%;\r\n  border: none;\r\n  background-color: white;\r\n  padding: 15px 0;\r\n  border-top: 1px solid rgb(0, 0, 0, 0.4);\r\n  color: rgb(35, 34, 34);\r\n}\r\n\r\n.clear-btn:hover {\r\n  background-color: rgb(223, 220, 220);\r\n  cursor: pointer;\r\n}\r\n"],sourceRoot:""}]);const s=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r="",t=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),t&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=n(e),t&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(n,r,t,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(t)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);t&&a[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),r&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=r):A[2]=r),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),e.push(A))}},e}},537:n=>{n.exports=function(n){var e=n[1],r=n[3];if(!r)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),i="/*# ".concat(o," */"),a=r.sources.map((function(n){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function r(n){for(var r=-1,t=0;t<e.length;t++)if(e[t].identifier===n){r=t;break}return r}function t(n,t){for(var i={},a=[],s=0;s<n.length;s++){var c=n[s],l=t.base?c[0]+t.base:c[0],A=i[l]||0,d="".concat(l," ").concat(A);i[l]=A+1;var p=r(d),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var f=o(u,t);t.byIndex=s,e.splice(s,0,{identifier:d,updater:f,references:1})}a.push(d)}return a}function o(n,e){var r=e.domAPI(e);return r.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;r.update(n=e)}else r.remove()}}n.exports=function(n,o){var i=t(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=r(i[a]);e[s].references--}for(var c=t(n,o),l=0;l<i.length;l++){var A=r(i[l]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}i=c}}},569:n=>{var e={};n.exports=function(n,r){var t=function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,r)=>{n.exports=function(n){var e=r.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(r){!function(n,e,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function r(t){var o=e[t];if(void 0!==o)return o.exports;var i=e[t]={id:t,exports:{}};return n[t](i,i.exports,r),i.exports}r.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return r.d(e,{a:e}),e},r.d=(n,e)=>{for(var t in e)r.o(e,t)&&!r.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},r.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),r.nc=void 0,(()=>{var n=r(379),e=r.n(n),t=r(795),o=r.n(t),i=r(569),a=r.n(i),s=r(565),c=r.n(s),l=r(216),A=r.n(l),d=r(589),p=r.n(d),u=r(424),f={};f.styleTagTransform=p(),f.setAttributes=c(),f.insert=a().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=A(),e()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;class g{constructor(n,e,r){this.description=n,this.completed=e,this.index=r}}let h=JSON.parse(localStorage.getItem("task-list"))||[];function m(){const n=document.querySelectorAll(".task-ui"),e=document.querySelectorAll(".trash"),r=document.querySelectorAll(".edit"),t=document.querySelector(".task-list");for(let t=0;t<n.length;t+=1)n[t].addEventListener("click",(()=>{n[t].classList.toggle("highlight"),e[t].classList.toggle("inactive"),r[t].classList.toggle("inactive")}));e.forEach((n=>{n.addEventListener("click",(n=>{const e=n.target.parentElement,r=e.firstChild.nextSibling.textContent;t.removeChild(e),h=h.filter((n=>n.description!==r));for(let n=0;n<h.length;n+=1)h[n].index=n+1;localStorage.setItem("task-list",JSON.stringify(h))}))}))}function E(){document.querySelectorAll(".para").forEach((n=>{let e=n.textContent;n.addEventListener("keydown",(r=>{if("Enter"===r.key){r.preventDefault();const t=n.textContent,o=h.filter((n=>n.description===e));h[o[0].index-1].description=t,e=t,localStorage.setItem("task-list",JSON.stringify(h)),n.parentElement.classList.remove("highlight"),n.nextElementSibling.classList.remove("inactive"),n.nextElementSibling.nextElementSibling.classList.add("inactive")}}))}))}const C=()=>{h.forEach((n=>{(n=>{const e=document.querySelector(".task-list"),r=document.createElement("div");r.classList.add("task-ui");const t=document.createElement("input");t.setAttribute("type","checkbox"),t.classList.add("check");const o=document.createElement("p");o.setAttribute("contenteditable","true"),o.setAttribute("class","para"),o.textContent=n.description;const i=document.createElement("i");i.setAttribute("class","fa-solid fa-ellipsis-vertical"),i.classList.add("icon","edit");const a=document.createElement("i");a.setAttribute("class","fa-solid fa-trash"),a.classList.add("inactive","icon","trash"),r.append(t,o,i,a),e.appendChild(r)})(n),document.querySelectorAll(".check").forEach((n=>{n.addEventListener("change",(e=>{const r=n.nextElementSibling,t=r.parentElement,o=n.nextSibling.textContent,i=h.filter((n=>n.description===o));e.target.checked?(r.classList.add("line-through"),t.classList.add("checked"),h[i[0].index-1].completed=!0):(r.classList.remove("line-through"),t.classList.remove("checked"),h[i[0].index-1].completed=!1),localStorage.setItem("task-list",JSON.stringify(h))}));const e=document.querySelector(".clear-btn"),r=document.querySelector(".task-list");e.addEventListener("click",(()=>{const e=document.querySelectorAll(".checked");n.checked&&(h=h.filter((n=>!0!==n.completed))),e.forEach((n=>{r.removeChild(n)}));for(let n=0;n<h.length;n+=1)h[n].index=n+1;return localStorage.setItem("task-list",JSON.stringify(h))}))}))}))};document.getElementById("input").addEventListener("keydown",(n=>function(n){"Enter"===n.key&&(document.querySelector(".task-list").innerHTML="",function(){const n=document.getElementById("input"),e=n.value;if(document.querySelector(".task-list").innerHTML="",""!==e){const r=new g(e,!1,h.length+1);h.push(r),C(),m(),E(),n.value="",localStorage.setItem("task-list",JSON.stringify(h))}}())}(n))),C(),m(),E()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,